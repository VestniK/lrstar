
/*--- LRSTAR Lexical Grammar Syntax. ---*/   

/*--- Terminal Symbols. ------*/
  														    
	T_ERROR			<error>        => error (0);
	T_ALPHA			<alpha>        => firstsym ({first_alpha});
	T_LEXICAL   	<lexical>      => firstsym ({first_lexical});
	T_IGNORE   		<ignore>       => firstsym ({first_ignore});
	T_ESCAPE 		<escape>       => firstsym ({first_escape});
	T_LITERAL		<literal>		=> firstsym ({first_literal});	
	T_STRING  		<string>			=> firstsym ({first_string});	
	T_INTEGER		<integer>		;
	T_EOF				<eof>				;

	T_ARROW  		'->'				=> arrow ();
	T_RETURN			'=>'				;
	T_LEFTP			'('				;
	T_RIGHTP			')'				;
	T_PLUS			'+'				;
	T_STAR			'*'				;
	T_QUEST			'?'				;
	T_DOTS			'..'				;
	T_BAR				'|'				;
	T_DASH			'-'				;
	T_LCB 			'{'				;
	T_RCB 			'}'				;
	T_SEMI 			';'				;
	T_PERCENT		'%%'				;

/*--- Nonterminal Symbols. ---*/

   Goal           	-> Grammar <eof>								

	Grammar        	->	        TokenProd...     
	               	->         TokenProd... PP    
	               	->         TokenProd...    (NonterminalDef|SetDef|EscapeDef)...
	               	->         TokenProd... PP (NonterminalDef|SetDef|EscapeDef)...
	               	-> Options TokenProd...     
	               	-> Options TokenProd... PP    
	               	-> Options TokenProd...    (NonterminalDef|SetDef|EscapeDef)...
	               	-> Options TokenProd... PP (NonterminalDef|SetDef|EscapeDef)...

  	Options				->	{first_string}		 	   				=> PRO_OPTNS(1)
													   
/*--- Token Definitions ---*/

	PP 					-> '%%'											=> EOGI(0)

   TokenProd      	-> Token ReturnValue 
                  	-> Token ActionCode 

   Token          	-> {first_lexical}	   					=> ADD_TOKEN  (1)
                     -> {first_literal}  					   	=> ADD_TOKEN2 (1)
                     -> {first_string}  	 						=> ADD_TOKEN2 (1)

	ReturnValue	   	-> <integer>                           => ADD_TERMNO (1)
							-> <alpha>                             => ADD_DEFCON (1)
							-> <string>				   					=> ADD_STRING (1)
	ActionCode			-> '{'			          					=> ADD_CODE   (1)

/*--- Nonterminal Definitions ---*/

   NonterminalDef    -> AlphaSymbol   ArrowProd... [';'] 
							-> LexicalSymbol ArrowProd... [';'] 
							-> IgnoreSymbol  ArrowProd... [';'] 
                     -> AlphaSymbol   ArrowProd BarProd... [';'] 
							-> LexicalSymbol ArrowProd BarProd... [';'] 
							-> IgnoreSymbol  ArrowProd BarProd... [';'] 

   AlphaSymbol			-> {first_alpha}								=> ADD_HEAD(1)
   LexicalSymbol     -> {first_lexical}							=> ADD_HEADLEX(1)
   IgnoreSymbol      -> {first_ignore}								=> ADD_HEADIGNORE(1)

   ArrowProd			-> Arrow TailExprList                        
   Arrow					-> '->'                                => ADD_PROD()

   BarProd				-> Bar TailExprList                        
   Bar					-> '|'                                 => ADD_PROD()

   TailExprList     	-> TailExpr...                         => POP_ALL()

   TailExpr       	-> TailSymbol
                  	-> TailSymbol '+'								=> PUSH_PLUS()
                  	-> TailSymbol '*'								=> PUSH_ASTER()
                  	-> TailSymbol '?'								=> PUSH_QUEST()
                  	-> GroupStart List GroupEnd

   List           	-> TailExpr
                  	-> List TailExpr
                  	-> List Or TailExpr 

   Or             	-> '|'                                 => PUSH_OR()
   GroupStart     	-> '('                                 => PUSH_GBEG()
   GroupEnd       	-> ')'                                 => PUSH_GEND()
                  	-> ')' '+'										=> PUSH_GPLUS()
                  	-> ')' '*'										=> PUSH_GASTER()
                  	-> ')' '?'										=> PUSH_GQUEST()

   TailSymbol     	-> <alpha>										=> PUSH_TAIL (1)
                  	-> <escape>										=> PUSH_TAIL (1)
                  	-> <lexical>                           => PUSH_TAIL (1)
                  	-> <literal>									=> PUSH_TAIL (1)
                  	-> <string>										=> PUSH_TAIL (1)
                  	-> <integer>									=> PUSH_TAIL (1)

/*--- Set Definitions ---*/

	SetDef         	-> AlphaSymbol Arrow '{' SetExpr '}'      => DEF_SET()
							-> AlphaSymbol Arrow '{' SetExpr '}' ';'  => DEF_SET()

   SetExpr         	-> Range                               	=> FIRST_RANGE(1)
                  	-> Character										=> FIRST_CHAR(1)
							->	CharacterSetName								=> FIRST_SET(1)
                  	-> SetExpr  '|' Range							=> ADD_RANGE(3)
                  	-> SetExpr  '|' Character						=> ADD_CHAR(3)
                  	-> SetExpr  '|' CharacterSetName				=> ADD_SET(3)
                  	-> SetExpr  '-' Range							=> SUB_RANGE(3)
                  	-> SetExpr  '-' Character						=> SUB_CHAR(3)
                  	-> SetExpr  '-' CharacterSetName				=> SUB_SET(3)

   Range          	-> RangeStart '..' RangeEnd
   RangeEnd         	-> Character										=> RANGE_END(1)
   RangeStart     	-> Character                           	=> RANGE_START(1)

   Character         -> <literal>                           
                  	-> <string>                           
                  	-> <integer>                           

  	CharacterSetName	-> <alpha>		
  							-> <escape>

/*--- Escape Definitions ---*/

	EscapeDef        	-> EscapeSymbol Arrow Number
	                 	-> EscapeSymbol Arrow Number ';'
	
   EscapeSymbol		-> {first_escape}								=> ADD_HEADSET(1)

	Number				-> <integer>									=> FIRST_CHAR(1)

/*--- End of Grammar. ---*/

