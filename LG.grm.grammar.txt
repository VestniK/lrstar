
/* LG grammar */

/* Options */

/* Declarations */

   0       T_ERROR                   <error>                   => error(0);
   1       T_ALPHA                   <alpha>                   => firstsym({first_alpha});
   2       T_LEXICAL                 <lexical>                 => firstsym({first_lexical});
   3       T_IGNORE                  <ignore>                  => firstsym({first_ignore});
   4       T_ESCAPE                  <escape>                  => firstsym({first_escape});
   5       T_LITERAL                 <literal>                 => firstsym({first_literal});
   6       T_STRING                  <string>                  => firstsym({first_string});
   7       T_INTEGER                 <integer>                 ;
   8       T_EOF                     <eof>                     ;
   9       T_ARROW                   '->'                      => arrow();
  10       T_RETURN                  '=>'                      ;
  11       T_LEFTP                   '('                       ;
  12       T_RIGHTP                  ')'                       ;
  13       T_PLUS                    '+'                       ;
  14       T_STAR                    '*'                       ;
  15       T_QUEST                   '?'                       ;
  16       T_DOTS                    '..'                      ;
  17       T_BAR                     '|'                       ;
  18       T_DASH                    '-'                       ;
  19       T_LCB                     '{'                       ;
  20       T_RCB                     '}'                       ;
  21       T_SEMI                    ';'                       ;
  22       T_PERCENT                 '%%'                      ;

  23       {first_alpha}             ;
  24       {first_lexical}           ;
  25       {first_ignore}            ;
  26       {first_escape}            ;
  27       {first_literal}           ;
  28       {first_string}            ;

/* Operator Precedence */

/* Rules */

   0       Goal
       0       -> Grammar <eof>
                ;
   1       Grammar
       1       -> TokenProd...
       2       -> TokenProd... PP
       3       -> TokenProd... (NonterminalDef | SetDef | EscapeDef)...
       4       -> TokenProd... PP (NonterminalDef | SetDef | EscapeDef)...
       5       -> Options TokenProd...
       6       -> Options TokenProd... PP
       7       -> Options TokenProd... (NonterminalDef | SetDef | EscapeDef)...
       8       -> Options TokenProd... PP (NonterminalDef | SetDef | EscapeDef)...
                ;
   2       Options
       9       -> {first_string}                                                 => PRO_OPTNS(1)
                ;
   3       PP
      10       -> '%%'                                                           => EOGI(0)
                ;
   4       TokenProd
      11       -> Token ReturnValue
      12       -> Token ActionCode
                ;
   5       Token
      13       -> {first_lexical}                                                => ADD_TOKEN(1)
      14       -> {first_literal}                                                => ADD_TOKEN2(1)
      15       -> {first_string}                                                 => ADD_TOKEN2(1)
                ;
   6       ReturnValue
      16       -> <integer>                                                      => ADD_TERMNO(1)
      17       -> <alpha>                                                        => ADD_DEFCON(1)
      18       -> <string>                                                       => ADD_STRING(1)
                ;
   7       ActionCode
      19       -> '{'                                                            => ADD_CODE(1)
                ;
   8       NonterminalDef
      20       -> AlphaSymbol ArrowProd... [';']
      21       -> LexicalSymbol ArrowProd... [';']
      22       -> IgnoreSymbol ArrowProd... [';']
      23       -> AlphaSymbol ArrowProd BarProd... [';']
      24       -> LexicalSymbol ArrowProd BarProd... [';']
      25       -> IgnoreSymbol ArrowProd BarProd... [';']
                ;
   9       AlphaSymbol
      26       -> {first_alpha}                                                  => ADD_HEAD(1)
                ;
  10       LexicalSymbol
      27       -> {first_lexical}                                                => ADD_HEADLEX(1)
                ;
  11       IgnoreSymbol
      28       -> {first_ignore}                                                 => ADD_HEADIGNORE(1)
                ;
  12       ArrowProd
      29       -> Arrow TailExprList
                ;
  13       Arrow
      30       -> '->'                                                           => ADD_PROD()
                ;
  14       BarProd
      31       -> Bar TailExprList
                ;
  15       Bar
      32       -> '|'                                                            => ADD_PROD()
                ;
  16       TailExprList
      33       -> TailExpr...                                                    => POP_ALL()
                ;
  17       TailExpr
      34       -> TailSymbol
      35       -> TailSymbol '+'                                                 => PUSH_PLUS()
      36       -> TailSymbol '*'                                                 => PUSH_ASTER()
      37       -> TailSymbol '?'                                                 => PUSH_QUEST()
      38       -> GroupStart List GroupEnd
                ;
  18       List
      39       -> TailExpr
      40       -> List TailExpr
      41       -> List Or TailExpr
                ;
  19       Or
      42       -> '|'                                                            => PUSH_OR()
                ;
  20       GroupStart
      43       -> '('                                                            => PUSH_GBEG()
                ;
  21       GroupEnd
      44       -> ')'                                                            => PUSH_GEND()
      45       -> ')' '+'                                                        => PUSH_GPLUS()
      46       -> ')' '*'                                                        => PUSH_GASTER()
      47       -> ')' '?'                                                        => PUSH_GQUEST()
                ;
  22       TailSymbol
      48       -> <alpha>                                                        => PUSH_TAIL(1)
      49       -> <escape>                                                       => PUSH_TAIL(1)
      50       -> <lexical>                                                      => PUSH_TAIL(1)
      51       -> <literal>                                                      => PUSH_TAIL(1)
      52       -> <string>                                                       => PUSH_TAIL(1)
      53       -> <integer>                                                      => PUSH_TAIL(1)
                ;
  23       SetDef
      54       -> AlphaSymbol Arrow '{' SetExpr '}'                              => DEF_SET()
      55       -> AlphaSymbol Arrow '{' SetExpr '}' ';'                          => DEF_SET()
                ;
  24       SetExpr
      56       -> Range                                                          => FIRST_RANGE(1)
      57       -> Character                                                      => FIRST_CHAR(1)
      58       -> CharacterSetName                                               => FIRST_SET(1)
      59       -> SetExpr '|' Range                                              => ADD_RANGE(3)
      60       -> SetExpr '|' Character                                          => ADD_CHAR(3)
      61       -> SetExpr '|' CharacterSetName                                   => ADD_SET(3)
      62       -> SetExpr '-' Range                                              => SUB_RANGE(3)
      63       -> SetExpr '-' Character                                          => SUB_CHAR(3)
      64       -> SetExpr '-' CharacterSetName                                   => SUB_SET(3)
                ;
  25       Range
      65       -> RangeStart '..' RangeEnd
                ;
  26       RangeEnd
      66       -> Character                                                      => RANGE_END(1)
                ;
  27       RangeStart
      67       -> Character                                                      => RANGE_START(1)
                ;
  28       Character
      68       -> <literal>
      69       -> <string>
      70       -> <integer>
                ;
  29       CharacterSetName
      71       -> <alpha>
      72       -> <escape>
                ;
  30       EscapeDef
      73       -> EscapeSymbol Arrow Number
      74       -> EscapeSymbol Arrow Number ';'
                ;
  31       EscapeSymbol
      75       -> {first_escape}                                                 => ADD_HEADSET(1)
                ;
  32       Number
      76       -> <integer>                                                      => FIRST_CHAR(1)
                ;
  33       TokenProd...
      77       -> TokenProd
      78       -> TokenProd... TokenProd
                ;
  34       (NonterminalDef | SetDef | EscapeDef)
      79       -> NonterminalDef
      80       -> SetDef
      81       -> EscapeDef
                ;
  35       (NonterminalDef | SetDef | EscapeDef)...
      82       -> (NonterminalDef | SetDef | EscapeDef)
      83       -> (NonterminalDef | SetDef | EscapeDef)... (NonterminalDef | SetDef | EscapeDef)
                ;
  36       ArrowProd...
      84       -> ArrowProd
      85       -> ArrowProd... ArrowProd
                ;
  37       [';']
      86       ->
      87       -> ';'
                ;
  38       BarProd...
      88       -> BarProd
      89       -> BarProd... BarProd
                ;
  39       TailExpr...
      90       -> TailExpr
      91       -> TailExpr... TailExpr
                ;

/* End of LG grammar */

